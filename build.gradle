import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'java-library'
    id 'idea'
    id("net.darkhax.curseforgegradle") version "1.1.26"
}

allprojects {
    version = mod_version + (release_type != "release" ? "-$release_type" : "")
    group = mod_group_id
}

base {
    archivesName = "$mod_id-$minecraft_version"
}

repositories {
    maven { url "https://maven.neoforged.net/releases" }
    maven { url "https://libraries.minecraft.net/" }
    mavenCentral()
}

configurations {
    jijMod {}
}

configurations {
    jijLib {}
}

switch (org.gradle.internal.os.OperatingSystem.current()) {
    case org.gradle.internal.os.OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        def osArch = System.getProperty("os.arch")
        if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
            project.ext.lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
        } else if (osArch.startsWith("ppc")) {
            project.ext.lwjglNatives += "-ppc64le"
        } else if (osArch.startsWith("riscv")) {
            project.ext.lwjglNatives += "-riscv64"
        }
        break
    case org.gradle.internal.os.OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
    case org.gradle.internal.os.OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86"
        break
}

def lwjglJavaLibs = [
        "vulkan",
]

def lwjglNativeLibs = [
        "shaderc",
        "spvc",
        "vma",
]

def lwjglNativePlatforms = [
        "natives-linux",
        "natives-linux-arm64",
        "natives-macos",
        "natives-macos-arm64",
        "natives-windows",
        "natives-windows-arm64",
]

modLibsToAdd = []

dependencies {
    compileOnly("net.neoforged.fancymodloader:loader:$fml_version")
    compileOnly("cpw.mods:securejarhandler:3.0.8")
    compileOnly("org.jetbrains:annotations:24.1.0")
    compileOnly("org.lwjgl:lwjgl-glfw:3.3.3")
    compileOnly("org.lwjgl:lwjgl-tinyfd:3.3.3")
    compileOnly("net.sf.jopt-simple:jopt-simple:5.0.4")
    // removed in sync because it creates a dependency on a compiling build for sync to work
    if (System.getProperty("idea.sync.active") == null) {
        jijMod(project(path: ":cinnabar", configuration: "builtModJar"))
    }

    modLibsToAdd.add("org.lwjgl:lwjgl-vulkan:$lwjglVersion")
    modLibsToAdd.add("org.lwjgl:lwjgl-spvc:$lwjglVersion")
    modLibsToAdd.add("org.lwjgl:lwjgl-shaderc:$lwjglVersion")

    for (lib in lwjglJavaLibs) {
        var baseLibName = "org.lwjgl:lwjgl-$lib:$lwjglVersion"
        modLibsToAdd.add(baseLibName)
        jijLib(baseLibName)
        runtimeOnly(baseLibName)
    }
    for (lib in lwjglNativeLibs) {
        var baseLibName = "org.lwjgl:lwjgl-$lib:$lwjglVersion"
        modLibsToAdd.add(baseLibName)
        jijLib(baseLibName)
        runtimeOnly(baseLibName)
        runtimeOnly(baseLibName + ":$lwjglNatives")
        for (nativePlatform in lwjglNativePlatforms) {
            jijLib(baseLibName + ":$nativePlatform")
        }
    }

    jijLib("org.lwjgl:lwjgl-vulkan:$lwjglVersion:natives-macos")
    jijLib("org.lwjgl:lwjgl-vulkan:$lwjglVersion:natives-macos-arm64")

}

jar {
    manifest {
        attributes["FMLModType"] = "LIBRARY"
        attributes["Automatic-Module-Name"] = "cinnabar_locator"
    }
    into("META-INF/modjar") {
        from(configurations.jijMod)
    }
    into("META-INF/lib") {
        from(configurations.jijLib) {
            exclude("lwjgl-3.3.3.jar")
        }
    }
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

def curseforgeToken = System.getenv("curseforge_token")

def changelog = """
[https://github.com/RogueLogix/Cinnabar/blob/$version/changelog.md](https://github.com/RogueLogix/Cinnabar/blob/$version/changelog.md)
"""

// only enable this if we are the root project
// prevents accidentally publishing as submodule project
if (curseforgeToken != null && this.project == this.rootProject) {
    tasks.register('publishCurseForge', TaskPublishCurseForge) {

        debugMode = true

        apiToken = curseforgeToken
        def projectId = "552238"

        def mainFile = upload(projectId, jar)
        mainFile.changelog = changelog
        mainFile.changelogType = 'markdown'
        mainFile.releaseType = release_type
        mainFile.gameVersions.clear()
        mainFile.addGameVersion(minecraft_version)
        mainFile.addJavaVersion('Java 21')
        mainFile.addModLoader('NeoForge')

        mainFile.curseFileId
    }
}