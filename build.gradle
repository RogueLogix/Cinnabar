import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.21'
    id("net.darkhax.curseforgegradle") version "1.1.26"
}


allprojects {
    version = mod_version + (release_type != "release" ? "-$release_type" : "")
    group = mod_group_id
}

base {
    archivesName = "$mod_id-$minecraft_version"
}

switch (org.gradle.internal.os.OperatingSystem.current()) {
    case org.gradle.internal.os.OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        def osArch = System.getProperty("os.arch")
        if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
            project.ext.lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
        } else if (osArch.startsWith("ppc")) {
            project.ext.lwjglNatives += "-ppc64le"
        } else if (osArch.startsWith("riscv")) {
            project.ext.lwjglNatives += "-riscv64"
        }
        break
    case org.gradle.internal.os.OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
    case org.gradle.internal.os.OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86"
        break
}

def lwjglJavaLibs = [
        "vulkan",
]

def lwjglNativeLibs = [
        "shaderc",
        "spvc",
        "vma",
]

def lwjglNativePlatforms = [
        "natives-linux",
        "natives-linux-arm64",
        "natives-macos",
        "natives-macos-arm64",
        "natives-windows",
        "natives-windows-arm64",
]


configurations {
    builtModJar {
        canBeConsumed = true
        canBeResolved = true
    }
}

repositories {
    maven { url "https://maven.neoforged.net/releases" }
    maven { url "https://libraries.minecraft.net/" }
    mavenCentral()
    mavenLocal()
    maven {
        name 'Maven for PR #2297' // https://github.com/neoforged/NeoForge/pull/2297
        url 'https://prmaven.neoforged.net/NeoForge/pr2297'
        content {
            includeModule('net.neoforged', 'neoforge')
        }
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

sourceSets {
    // externally accessible API
    api {
        //The API has no resources
        resources.srcDirs = []
        compileClasspath += main.compileClasspath.filter { File element ->
            // API requires javax.annotation for TypeQualifierDefault
            return true
        }
    }
    // internal library
    lib {
        compileClasspath += api.output
        compileClasspath += main.compileClasspath.filter { File element ->
            // MC and all related classes
            if (element.name.startsWith("neoforge")) {
                return false
            }
            // javax.annotation
            if (element.name.startsWith("annotations-3.0.1") || element.name.startsWith("jsr305")) {
                return false
            }
            return true
        }
    }
    // internal library, parts that need access to MC
    mclib {
        java {
            srcDirs = ['src/libmc/java']
        }
        compileClasspath += api.output
        compileClasspath += lib.output
        compileClasspath += main.compileClasspath.filter { File element ->
            // javax.annotation
            if (element.name.startsWith("annotations-3.0.1") || element.name.startsWith("jsr305")) {
                return false
            }
            return true
        }
    }
    // the main renderer core
    core {
        resources.srcDirs = []
        compileClasspath += api.output
        compileClasspath += lib.output
        compileClasspath += mclib.output
        compileClasspath += main.compileClasspath.filter { File element ->
            // javax.annotation
            if (element.name.startsWith("annotations-3.0.1") || element.name.startsWith("jsr305")) {
                return false
            }
            return true
        }
    }
    main {
        java {
            srcDirs = ["src/mod/java"]
        }
        resources.srcDirs = ["src/mod/resources"]
        compileClasspath += api.output
        compileClasspath += core.output
        compileClasspath += lib.output
        compileClasspath += mclib.output
    }
}

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

     accessTransformers = project.files('src/mod/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
            programArguments.addAll "--CinnabarLaunchedFromIDE"
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.api)
            sourceSet(sourceSets.core)
            sourceSet(sourceSets.lib)
            sourceSet(sourceSets.mclib)
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

loaderLibsToPack = []

dependencies {

    additionalRuntimeClasspath(project(":loader"))

    for (lib in lwjglJavaLibs) {
        var baseLibName = "org.lwjgl:lwjgl-$lib:$lwjglVersion"
        implementation(baseLibName)
        additionalRuntimeClasspath(baseLibName)
        loaderLibsToPack.add(baseLibName)
    }
    for (lib in lwjglNativeLibs) {
        var baseLibName = "org.lwjgl:lwjgl-$lib:$lwjglVersion"
        implementation(baseLibName)
        additionalRuntimeClasspath(baseLibName)
        loaderLibsToPack.add(baseLibName)
        additionalRuntimeClasspath(baseLibName + ":$lwjglNatives")
        for (nativePlatform in lwjglNativePlatforms) {
            loaderLibsToPack.add(baseLibName + ":$nativePlatform")
        }
    }

    loaderLibsToPack.add("org.lwjgl:lwjgl-vulkan:$lwjglVersion:natives-macos")
    loaderLibsToPack.add("org.lwjgl:lwjgl-vulkan:$lwjglVersion:natives-macos-arm64")
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/mod/templates"
    into "build/generated/sources/modMetadata"
}
sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

artifacts {
    builtModJar(tasks.jar.archiveFile) {
        builtBy(jar)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

tasks.register('apiJar', Jar).configure { Jar jar1 ->
    jar1.duplicatesStrategy(DuplicatesStrategy.FAIL)
    jar1.archiveBaseName = "$mod_id-$minecraft_version"
    jar1.archiveClassifier = "api"
    jar1.from([
            sourceSets.api.output,
            sourceSets.api.allJava
    ])
}

tasks.register('sourcesJar', Jar).configure { Jar jar1 ->
    jar1.duplicatesStrategy(DuplicatesStrategy.FAIL)
    jar1.archiveBaseName = "$mod_id-$minecraft_version"
    jar1.archiveClassifier = "sources"
    jar1.from([
            sourceSets.api.output,
            sourceSets.lib.output,
            sourceSets.mclib.output,
            sourceSets.core.output,
            sourceSets.main.output,
            sourceSets.api.allJava,
            sourceSets.lib.allJava,
            sourceSets.mclib.allJava,
            sourceSets.core.allJava,
            sourceSets.main.allJava,
    ])
}


tasks.named('jar', Jar).configure { Jar jar1 ->
    jar1.duplicatesStrategy(DuplicatesStrategy.FAIL)
    jar1.archiveBaseName = "$mod_id-$minecraft_version"
    jar1.archiveVersion = jar1.archiveVersion.get() + "-packed"
    jar1.from([
            sourceSets.api.output,
            sourceSets.lib.output,
            sourceSets.mclib.output,
            sourceSets.core.output,
            sourceSets.main.output,
    ])
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

def curseforgeToken = System.getenv("curseforge_token")

def changelog = """
[https://github.com/RogueLogix/Cinnabar/blob/$version/changelog.md](https://github.com/RogueLogix/Cinnabar/blob/$version/changelog.md)
"""

// only enable this if we are the root project
// prevents accidentally publishing as submodule project
if (curseforgeToken != null && this.project == this.rootProject) {
    tasks.register('publishCurseForge', TaskPublishCurseForge) {
        
        debugMode = true
        
        apiToken = curseforgeToken
        def projectId = "552238"

        def mainFile = upload(projectId, project(":loader").jar)
        mainFile.changelog = changelog
        mainFile.changelogType = 'markdown'
        mainFile.releaseType = release_type
        mainFile.gameVersions.clear()
        mainFile.addGameVersion(minecraft_version)
        mainFile.addJavaVersion('Java 21')
        mainFile.addModLoader('NeoForge')

        mainFile.withAdditionalFile(apiJar)
        mainFile.withAdditionalFile(sourcesJar)
        
        mainFile.curseFileId
    }
}