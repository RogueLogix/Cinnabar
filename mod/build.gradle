import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.21'
}

configurations {
    builtModJar {
        canBeConsumed = true
        canBeResolved = false
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name 'Maven for PR #2297' // https://github.com/neoforged/NeoForge/pull/2297
        url 'https://prmaven.neoforged.net/NeoForge/pr2297'
        content {
            includeModule('net.neoforged', 'neoforge')
        }
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

sourceSets {
    // externally accessible API
    api {
        //The API has no resources
        resources.srcDirs = []
        compileClasspath += main.compileClasspath.filter { File element ->
            // API requires javax.annotation for TypeQualifierDefault
            return true
        }
    }
    // internal library
    lib {
        compileClasspath += api.output
        compileClasspath += main.compileClasspath.filter { File element ->
            // MC and all related classes
            if (element.name.startsWith("neoforge")) {
                return false
            }
            // javax.annotation
            if (element.name.startsWith("annotations-3.0.1") || element.name.startsWith("jsr305")) {
                return false
            }
            return true
        }
    }
    // internal library, parts that need access to MC
    mclib {
        java {
            srcDirs = ['src/libmc/java']
        }
        compileClasspath += api.output
        compileClasspath += lib.output
        compileClasspath += main.compileClasspath.filter { File element ->
            // javax.annotation
            if (element.name.startsWith("annotations-3.0.1") || element.name.startsWith("jsr305")) {
                return false
            }
            return true
        }
    }
    // the main renderer core
    core {
        resources.srcDirs = []
        compileClasspath += api.output
        compileClasspath += lib.output
        compileClasspath += mclib.output
        compileClasspath += main.compileClasspath.filter { File element ->
            // javax.annotation
            if (element.name.startsWith("annotations-3.0.1") || element.name.startsWith("jsr305")) {
                return false
            }
            return true
        }
    }
    main {
        java {
            srcDirs = ["src/mod/java"]
        }
        resources.srcDirs = ["src/mod/resources"]
        compileClasspath += api.output
        compileClasspath += core.output
        compileClasspath += lib.output
        compileClasspath += mclib.output
    }
}

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
     accessTransformers = project.files('src/mod/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
            programArguments.addAll "--CinnabarLaunchedFromIDE"
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.api)
            sourceSet(sourceSets.core)
            sourceSet(sourceSets.lib)
            sourceSet(sourceSets.mclib)
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}


dependencies {
//    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    additionalRuntimeClasspath(getParent())

    for (lib in getParent().property("modLibsToAdd")) {
        implementation(lib)
    }
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/mod/templates"
    into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

artifacts {
    builtModJar(tasks.jar.archiveFile) {
        builtBy(jar)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

tasks.register('apiJar', Jar).configure { Jar jar1 ->
    jar1.duplicatesStrategy(DuplicatesStrategy.FAIL)
    jar1.archiveBaseName = "$mod_id-$minecraft_version"
    jar1.archiveClassifier = "api"
    jar1.from([
            sourceSets.api.output,
            sourceSets.api.allJava
    ])
}

tasks.named('jar', Jar).configure { Jar jar ->
    dependsOn(apiJar)
    jar.duplicatesStrategy(DuplicatesStrategy.FAIL)
    jar.from([
            sourceSets.api.output,
            sourceSets.lib.output,
            sourceSets.mclib.output,
            sourceSets.core.output,
            sourceSets.main.output,
    ])
}